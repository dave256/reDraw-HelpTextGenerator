# Mark Down to HTML converter for reDraw help documents with Bootstrap stylingimport sysdef main(argv):	if len(argv) > 1:		mdToHTML(argv[1])	else:		mdToHTML2("Testing/CanvasHelp.md")		def mdToHTML(mdFileName):	# open markdown file	mdFile = open(mdFileName, 'r')	# TODO: generate HTML file	TITLE = ["#", "##"]	LIST = ["*"]	htmlText = []	bootstrapText = []	# Head	htmlText.append(htmlHead())	bootstrapText.append(bootstrapHead())	# Body	introduction = True	tocSectionTitles = []	sectionLines = []	sectionLinesNums = []	htmlSections = []	bootstrapSections = []	for i, line in enumerate(mdFile):		words = line.split()		# check if line is blank		if len(words) > 1:			# check if line is a section title			if words[0] in TITLE:				# create previous section				#htmlSections.append(htmlSection(sectionLines))				#bootstrapSections.append(bootstrapSection(sectionLines))				#tocSectionTitles.append(words[1:])				tocSectionTitles.append(" ".join(words[1:]))				sectionLinesNums.append(i)                #sectionLinesNums.append(i)				#sectionLines = [words[1:]]			#else:			#	# add line to section			#	sectionLines.append(line)	#htmlText.append(htmlBody("\n".join(htmlSections)))	#bootstrapText.append(bootstrapBody("\n".join(bootstrapSections)))	#html = htmlStuff("\n".join(htmlText))	#bootstrap = htmlStuff("\n".join(bootstrapText))	## create file for HTML output	## remove '.md' extension and add '.html'	htmlFileName = mdFileName[:-3] + ".html"	#writeHTMLFile(html, htmlFileName)	#bootstrapFileName = mdFileName[:-3] + "Bootstrap.html"	#writeHTMLFile(bootstrap, bootstrapFileName)	htmlFile = open(htmlFileName, 'w')	for i, s in enumerate(tocSectionTitles):		print(s, file=htmlFile)		print(sectionLinesNums[i], file=htmlFile)	htmlFile.close()	# close file	mdFile.close()def mdToHTML2(mdFileName):	# open markdown file	mdFile = open(mdFileName, 'r')	# TODO: generate HTML file	TITLE = ["#", "##"]	LIST = ["*"]	htmlText = []	bootstrapText = []	# Head	htmlText.append(htmlHead())	bootstrapText.append(bootstrapHead())	# Body	introduction = True	tocSectionTitles = []	sections = []	sectionLines = []	htmlSections = []	bootstrapSections = []	for line in mdFile:				words = line.split()		# check if line is blank		if len(words) > 1:			# check if line is a section title			if words[0] in TITLE:     				if len(sectionLines) > 0:					sections.append(sectionLines)				sectionLines = [" ".join(words[1:])]			else:				# add line to section				sectionLines.append(line)	#htmlText.append(htmlBody("\n".join(htmlSections)))	#bootstrapText.append(bootstrapBody("\n".join(bootstrapSections)))	#html = htmlStuff("\n".join(htmlText))	#bootstrap = htmlStuff("\n".join(bootstrapText))	# create file for HTML output	# remove '.md' extension and add '.html'	#htmlFileName = mdFileName[:-3] + ".html"	#writeHTMLFile(html, htmlFileName)	#bootstrapFileName = mdFileName[:-3] + "Bootstrap.html"	#writeHTMLFile(bootstrap, bootstrapFileName)	for s in sections:		for l in s[1:]:			parseSectionBody(l, sections)	# close file	mdFile.close()def parseSectionBody(line, sections):	#for i, s in enumerate(sections):	#	if s[0] == "Settings":	#		a = "panel_" + str(i)	a = findPanelId("Pointer/Cursor", sections)def findPanelId(title, sections):	for i, s in enumerate(sections):		if s[0] == title:			return "panel_" + str(i)def writeHTMLFile(text, fileName):	# open HTML file for writing	htmlFile = open(fileName, 'w')	# write out file	print(text, file=htmlFile)	# close file	htmlFile.close()# Required HTML Stuffdef htmlStuff(contents):	return '<!DOCTYPE html>' + '\n' + '<html lang="en">' + '\n' + contents + '\n' + '</html>'# Headdef htmlHead():	return ""def bootstrapHead():	return ""# Bodydef htmlBody(contents):	return "" + contents + ""def bootstrapBody(contents):	return "" + contents + ""# Sectiondef htmlSection(lines):	text = ""	# Opening tags	# Title of section (lines[0])	# Body of section (lines[1:])	# TODO: Check for formatting characters (like *, ###, etc.)	# Closing tags	return textdef bootstrapSection(lines):	text = ""	# Opening tags	# Title of section (lines[0])	# Body of section (lines[1:])	# TODO: Check for formatting characters (like *, ###, etc.)	# Closing tags	return textif __name__ == '__main__':	main(sys.argv)	