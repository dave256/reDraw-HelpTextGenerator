# Mark Down to HTML converter for reDraw help documents with Bootstrap stylingimport sysimport redef main(argv):	if len(argv) > 1:		mdToHTML(argv[1])	else:		mdToHTML("Testing/CanvasHelp.md")		def mdToHTML(mdFileName):	# open markdown file	mdFile = open(mdFileName, 'r')	TITLE = ["#", "##"]	sections = []	sectionLines = []		for line in mdFile:		words = line.split()		# check if line is blank		if len(words) > 1:			# check if line is a section title			if words[0] in TITLE:     				if len(sectionLines) > 0:					sections.append(sectionLines)				sectionLines = [" ".join(words[1:])]			else:				# add line to section				sectionLines.append(line)	# write HTML	htmlFile = open("Testing/CanvasHelp.html", 'w')	# HTML Header	print("<!DOCTYPE html>", file=htmlFile)	print("<html lang=""en"">", file=htmlFile)	htmlHeader(htmlFile, "HTMLHelpDocs/Head.html")	# HTML Body	print("<body>", file=htmlFile)	print("    <div class=""panel-group"" id=""accordion"">", file=htmlFile)	bInList = False	for s in sections:		for l in s[1:]:			l = l[:-1]			bWasInList = bInList			bInList = l.startswith("* ")			if not bWasInList and bInList:				print("<ul>", file=htmlFile)			lnew = parseSectionBody(l, sections)			if bInList:				lnew = "<li>" + lnew[2:] + "</li>"			if bWasInList and not bInList:				print("</ul>", file=htmlFile)			print(lnew, file=htmlFile)	print("</div>", file=htmlFile)	print("</body>", file=htmlFile)	print("</html>", file=htmlFile)	# close files	htmlFile.close()	mdFile.close()def htmlHeader(htmlDst, fileHeadSrc):	htmlHead = open(fileHeadSrc, 'r')	for line in htmlHead:		print(line[:-1], file=htmlDst)def parseSectionBody(line, sections):	line = parseSectionBodyLineForHyperlinks(line, sections)	line = parseSectionBodyLineForFormatting(line, "\*\*", "strong")	line = parseSectionBodyLineForFormatting(line, "\*", "i")	line = parseSectionBodyLineForFormatting(line, "\_", "u")	line = parseSectionBodyLineForFormatting(line, "\$", "code")	line = parseSectionBodyLineForFormatting(line, "\@", "kbd")	return linedef parseSectionBodyLineForHyperlinks(line, sections):	matchObj = re.match( r'(.*)\[(.*?)\]\(\#([a-zA-Z0-9-\/]*)\)(.*)', line, re.M|re.I)	if matchObj:		a = findPanelId(matchObj.group(2), sections)		if a:			return matchObj.group(1) + "<a href='" + a + "'>" + matchObj.group(2) + "</a>" + matchObj.group(4)		else:			return matchObj.group(1) + "<b><i>UNKNOWN LINK[" + matchObj.group(2) + "]</i></b>" + matchObj.group(4)	else:		return linedef parseSectionBodyLineForFormatting(line, terminator, tagname):	pattern = r'(.*)' + terminator + '(.*?)' + terminator + '(.*)'	matchObj = re.match(pattern, line, re.M|re.I)	while matchObj:		line = matchObj.group(1) + "<" + tagname + ">" + matchObj.group(2) + "</" + tagname + ">" + matchObj.group(3)		matchObj = re.match(pattern, line, re.M|re.I)	return linedef findPanelId(title, sections):	for i, s in enumerate(sections):		if s[0] == title:			return "panel_" + str(i)if __name__ == '__main__':	main(sys.argv)	